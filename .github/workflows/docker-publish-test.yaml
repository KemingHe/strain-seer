# Purpose:
# This workflow is designed for testing Docker image builds and publishing before creating official releases.
# It differs from the main docker-publish workflow in several ways:
# 1. Manual trigger (workflow_dispatch) instead of release-based
# 2. Restricted to repository owners and admins only for security
# 3. Uses unique test-specific tags that include:
#    - Custom test name (provided at runtime)
#    - Git commit SHA
#    - Run number and attempt
#    - Timestamp
#
# Usage:
# 1. Go to the Actions tab in the repository
# 2. Select "Publish Test Image" workflow
# 3. Click "Run workflow" and optionally provide a test name
# 4. The workflow will build and push the image with a unique test tag
# 5. After testing, you can delete the test image using the command provided in the workflow output
#
# Important Notes:
# - Test images are tagged distinctly from release images to prevent confusion
# - Each test build creates a unique tag, making it easy to track and clean up
# - The workflow outputs the exact command needed to delete the test image
# - This workflow is meant for testing purposes only and should not be used for production releases

name: Publish Test Image

on:
  workflow_dispatch:
    inputs:
      test_name:
        description: 'Name of the test build (will be used in tag)'
        required: true
        type: string
        default: 'manual-test'

# Defines custom environment variables for the workflow
env:
  REGISTRY: ghcr.io
  # Docker requires lowercase names for both images and cache references
  IMAGE_NAME: keminghe/strain-seer
  REPO_NAME: keminghe/strain-seer

# Restrict to repository owners and admins only
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-and-push-test-image:
    runs-on: ubuntu-latest
    # Only allow repository owners to run this workflow
    if: github.actor == github.repository_owner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        # Pinned 3rd party action to commit hash of release v3.4.0 on 03/14/2025 to prevent supply chain attacks
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        # Pinned 3rd party action to commit hash of release v5.7.0 on 02/26/2025 to prevent supply chain attacks
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=test-${{ inputs.test_name }}-${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.event.inputs.test_name }}

      - name: Set up QEMU
        # Pinned 3rd party action to commit hash of release v3.6.0 on 02/28/2025 to prevent supply chain attacks
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        # Pinned 3rd party action to commit hash of release v3.10.0 on 02/26/2025 to prevent supply chain attacks
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2
        
      - name: Build and push Docker image
        id: push
        # Pinned 3rd party action to commit hash of release v6.15.0 on 02/26/2025 to prevent supply chain attacks
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,type=registry,ref=${{ env.REGISTRY }}/${{ env.REPO_NAME }}:buildcache
          cache-to: type=gha,mode=max,type=registry,ref=${{ env.REGISTRY }}/${{ env.REPO_NAME }}:buildcache
          build-args: BUILD_DATE=${{ github.event.inputs.test_name }},VCS_REF=${{ github.sha }}
          outputs: type=image,imageid=imageid,digest=digest,metadata=metadata

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Output image information
        run: |
          echo "Test image has been published with the following tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "To delete this test image later, you can use:"
          echo "docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ inputs.test_name }}-${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ github.event.inputs.test_name }}" 
          